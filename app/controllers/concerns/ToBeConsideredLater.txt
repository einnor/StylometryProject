# Path to the dataset
    path = Rails.root.join('app','models','csv_files',"MainDataSet.csv").to_s
    
    fanfics_src = Rjb::import("java.io.File").new(path)
    fanfics_csvloader = Rjb::import("weka.core.converters.CSVLoader").new
    fanfics_csvloader.setFile(fanfics_src)
    fanfics_data = fanfics_csvloader.getDataSet
    
    # NumericToNominal
    ntn = Rjb::import("weka.filters.unsupervised.attribute.NumericToNominal").new
    ntn.setInputFormat(fanfics_data)
    fanfics_data = Rjb::import("weka.filters.Filter").useFilter(fanfics_data, ntn)
    
    # Generate a classifier for the last index
    puts "Generate tree"
    
    tree = Rjb::import("weka.classifiers.trees.J48").new
    fanfics_data.setClassIndex(fanfics_data.numAttributes() - 1)
    tree.buildClassifier(fanfics_data)
    
    @dtreeString = tree.toString
    puts @dtreeString
    
    #session[:dtreeString] = @dtreeString
    
    # Write out to a dot file
    @student_id = session[:student_id]
    @classname = fanfics_data.classAttribute.toString.split(' ')[1] + @student_id.to_s
    
    session[:classname] = @classname
    
    graph = tree.graph.gsub(/Decision Tree {/, "Decision Tree {\n#{@classname}")
    File.open(Rails.root.join('app','assets','images','dots', @classname + '.dot').to_s,'w') { |f| f.write(graph) }
    `dot -Tgif < /home/ronnie/Rails/StylometryProject/app/assets/images/dots/#{@classname}.dot > /home/ronnie/Rails/StylometryProject/app/assets/images/gifs/#{@classname}.gif`
    
    
    puts "Generated tree for #{@classname}"
    
    preds_train = Array.new
    points_train_array = Array.new
    points_train = fanfics_data.numInstances
    points_train.times do |instance|
      pred = tree.classifyInstance(fanfics_data.instance(instance))
      point = fanfics_data.instance(instance).toString
      point = point.split(",") << pred
      points_train_array << point
      preds_train << pred
      puts "#{point} : #{pred}"
    end
    
    preds_train = preds_train.to_s.gsub("]","")
    preds_train = preds_train.to_s.gsub("[","")
    preds_train = preds_train.to_s.gsub(" ","")
    preds_train = preds_train.split(",")
    puts modeAndFrequency(preds_train)
    
    puts "Finished classifying train points"
    puts "*********************************************"
  
    # Follow same procedure for training
    #Load the test
    path = Rails.root.join('app','models','csv_files',"test.csv").to_s
    test_src = Rjb::import("java.io.File").new(path)
    test_csvloader = Rjb::import("weka.core.converters.CSVLoader").new
    test_csvloader.setFile(test_src)
    test_data = test_csvloader.getDataSet
    
    # NumericToNominal
    ntn = Rjb::import("weka.filters.unsupervised.attribute.NumericToNominal").new
    ntn.setInputFormat(test_data)
    test_data = Rjb::import("weka.filters.Filter").useFilter(test_data, ntn)
    
    test_data.setClassIndex(test_data.numAttributes() - 1)
    
    preds_test = Array.new
    points_test = test_data.numInstances
    points_test.times do |instance|
      pred = tree.classifyInstance(test_data.instance(instance))
      point = test_data.instance(instance).toString
      point = point.split(",")
      preds_test << pred
      puts "#{point} : #{pred}"
    end
    
    puts "Finished classifying test points"
    
    preds_test = preds_test.to_s.gsub("]","")
    preds_test = preds_test.to_s.gsub("[","")
    preds_test = preds_test.to_s.gsub(" ","")
    preds_test = preds_test.split(",")
    
    session[:totalTestInstances] = preds_test.size

    mAF = modeAndFrequency(preds_test)
    puts mAF
    mode = mAF.first.to_i
    
    # Get the identity of the author/student
    arrayForIDS = Array.new
    0.upto(points_train_array.size - 1) {|i|
      if mode == points_train_array[i].last
        arrayForIDS << points_train_array[i][-2]
      end
    }
    mAF2 = modeAndFrequency arrayForIDS
    id_number = mAF2.first.to_i
    @name = Student.find(id_number).name
    session[:name] = @name
    
    # Calculate percentage
    @correct = mAF.last
    @wrong = preds_test.size - @correct
    @percentage = (100 * @correct.to_f / preds_test.size).round(4)
    
    session[:correctlyClassified] = @correct
    session[:wronglyClassified] = @wrong
    session[:percentage] = @percentage
